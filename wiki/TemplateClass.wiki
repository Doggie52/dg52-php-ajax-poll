#summary Description of how the template class will look.

== Introduction ==

Below I will outline, for both yours' and my sake, generally how I will design the class controlling templates and the UI and how the structure of these will look.

The reason I am adding a template class is simply because I feel there needs to be an easy way to change the appearance of the poll - as it looks right now it's all stored inside PHP-files making editing and styling an enormous hassle.

The final purpose with the class is to make the poll entirely style-able.

= General Structure =

== Template Class ==
This class will hold all functions, references to template files and configuration files and the variables.

=== General workings ===
The class will require the reference file and load its array into a variable with a scope of the entire class. There will be one function to check for the  _.tmpl_ file's existence, one to load it, one to replace the _%VARIABLES%_ with the matching translations and one to display the resulting content. These `private` functions will then be wrapped into a `public` function which calls all of them in order.

=== Reference File or "Dictionary" ===
This file will hold a large array of variables and what they "translate" to, if you will. The file itself will be the only file, apart from the _.tmpl_ files, that the user will need to edit.

== _.tmpl_ Files ==
These files will contain all the HTML code that builds the user interface, as well as variables (in the following form: `%VARIABLE%`) that are replaced with definitions upon loading the template file.
Here is an example of what it could look like:
{{{
<html>
<head><title>%TITLE%</title></head>
<body>
<h1>%WELCOMEMESSAGE%</h1>
<h3>%POLLQUESTION%</h3>
<select>
<option>%POLLANSWER1%</option>
<option>%POLLANSWER2%</option>
</select>
<h4>%FOOTERMESSAGE%</h4>
</body>
</html>
}}}